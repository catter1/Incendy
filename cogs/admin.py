import discord
import requests
import json
import os
import shutil
import subprocess
from zipfile import ZipFile
from discord import app_commands
from discord.ext import commands
from resources import incendy

class Admin(commands.Cog):
	def __init__(self, client: incendy.IncendyBot):
		self.client = client

	async def cog_load(self):
		print(f' - {self.__cog_name__} cog loaded.')

	async def cog_unload(self):
		print(f' - {self.__cog_name__} cog unloaded.')

	### COMMANDS ###

	# @app_commands.command(name="cattermute", description="e")
	# @app_commands.default_permissions(administrator=True)
	# @app_commands.checks.has_permissions(administrator=True)
	# @is_catter()
	# async def cattermute(self, interaction: discord.Interaction):
	# 	pass

	@app_commands.command(name="github", description="Uploads a Stardust project to GitHub as a new release")
	@app_commands.default_permissions(administrator=True)
	@app_commands.checks.has_permissions(administrator=True)
	@app_commands.describe(
		project='The name of the datapack to update',
		pack_version='What datapack version? ex: v5.1.4',
		mc_version='What is the latest MC version it\'s for? ex: 1.19.2',
		datapack='The actual datapack zip file'
	)
	async def github(self, interaction: discord.Interaction, project: str, pack_version: str, mc_version: str, datapack: discord.Attachment):
		# Defer response
		await interaction.response.defer(thinking=True)

		# Auth
		pat = self.client.keys["git-pat"]
		auth = ('catter1', pat)

		# Get repo info and absolute paths
		repo_url = f"https://github.com/Stardust-Labs-MC/{project}.git"
		os.makedirs(os.getcwd() + '/temp_repo/', exist_ok=True)
		local_path = os.getcwd() + '/temp_repo/'
		
		# Download attached datapack
		await datapack.save(local_path + datapack.filename)
		zip_file = ZipFile(local_path + datapack.filename)

		# Run the Bash script to do the GitHub magic
		result = subprocess.run([f"{os.getcwd()}/resources/git.sh", repo_url, pack_version], stdout=subprocess.PIPE, stderr=subprocess.PIPE) #, stdout=subprocess.PIPE, stderr=subprocess.PIPE
		if result.returncode != 0:
			print(result)
			await interaction.followup.send("There's been an error uploading the pack to GitHub!")

		# Inits info for the release
		url = f'https://api.github.com/repos/Stardust-Labs-MC/{project}/releases'
		headers = {'Accept': 'application/vnd.github+json', 'Content-Type': 'application/json'}
		body = f"This version of {project} runs on {mc_version}. Stardust Labs will offer support for this version.\n\nIf you would like the mod version, you can download it from [Modrinth](https://modrinth.com/mod/{project.lower()}).\n\nThe Source Code zips should be ignored (they are auto-generated by Github)."
		data = {
			'tag_name': pack_version,
			'name': f"{project} (MC {mc_version}) {pack_version}",
			'body': body
		}

		# Create the release
		response = requests.post(url, json=data, headers=headers, auth=auth)
		if response.status_code != 201:
			print(response.text)
			await interaction.followup.send("There's been an error creating the release!")
		
		# Link for later
		release_link = response.json()['html_url']

		# Inits info for the binary
		url = f"https://uploads.github.com/repos/Stardust-Labs-MC/{project}/releases/{response.json()['id']}/assets?name={datapack.filename}"
		headers = {'Accept': 'application/vnd.github+json', 'Content-Type': 'application/zip'}
		with open(local_path + datapack.filename, 'rb') as f:
			data = f.read()
		
		# Send the binary
		response = requests.post(url, data=data, headers=headers, auth=auth)
		
		# Finish off with responses for the user
		if response.status_code == 201:
			await interaction.followup.send(f"The {project} repository has updated! You can view the release here: {release_link}")
		else:
			print(response.text)
			await interaction.followup.send("There's been an error attaching the datapack to the release!")

		# Clean up and remove the directories (thanks GPT Chat)
		for root, dirs, files in os.walk(local_path, topdown=False):
			for file in files:
				file_path = os.path.join(root, file)
				os.remove(file_path)

			for _dir in dirs:
				dir_path = os.path.join(root, _dir)
				os.rmdir(dir_path)

		os.rmdir(local_path)

	@github.autocomplete('project')
	async def autocomplete_callback(self, interaction: discord.Interaction, current: str):
		projects = sorted(["Terralith", "Incendium", "Nullscape", "Structory", "Amplified-Nether", "Continents", "Structory: Towers"])
		
		return [
            app_commands.Choice(name=project, value=project)
            for project in projects
            if current.replace(" ", "").lower() in project.replace(" ", "").lower()
        ]

	@app_commands.command(name="update", description="Updates Terralith to the Seedfix website")
	@app_commands.default_permissions(administrator=True)
	@app_commands.checks.has_permissions(administrator=True)
	async def update(self, interaction: discord.Interaction, version: str, datapack: discord.Attachment):
		""" /update version """
		await interaction.response.send_message("Do not use this command! Instead, use `/github`.", ephemeral=True)
		return

		url = datapack.url
		r = requests.get(url)

		if 'v' not in version:
			version = f'v{version}'
		with open(f"Terralith_{version}.zip", "wb") as f:
			f.write(r.content)

		await interaction.channel.send("Updating Terralith now...")

		os.mkdir("/home/catter/stardustSite/newterralith")
		os.replace(f"{os.path.expanduser('~')}/bots/Incendy/Terralith_{version}.zip", f"{os.path.expanduser('~')}/stardustSite/newterralith/Terralith_{version}.zip")
		with ZipFile(f"{os.path.expanduser('~')}/stardustSite/newterralith/Terralith_{version}.zip", "r") as zf:
			zf.extractall(f"{os.path.expanduser('~')}/stardustSite/newterralith")
		os.remove(f"{os.path.expanduser('~')}/stardustSite/newterralith/Terralith_{version}.zip")
		os.remove(f"{os.path.expanduser('~')}/stardustSite/overworld.json")

		shutil.rmtree(f"{os.path.expanduser('~')}/stardustSite/terralith", ignore_errors=True)
		shutil.rmtree(f"{os.path.expanduser('~')}/stardustSite/apiterralith", ignore_errors=True)
		shutil.move(f"{os.path.expanduser('~')}/stardustSite/newterralith", f"{os.path.expanduser('~')}/stardustSite/terralith")
		shutil.copytree(f"{os.path.expanduser('~')}/stardustSite/terralith", f"{os.path.expanduser('~')}/stardustSite/apiterralith")
		shutil.copy(f"{os.path.expanduser('~')}/stardustSite/terralith/data/minecraft/dimension/overworld.json", f"{os.path.expanduser('~')}/stardustSite/overworld.json")

		with open(f"{os.path.expanduser('~')}/stardustSite/static/info.json", "r") as f:
			data = json.load(f)
		data["version"] = version
		with open(f"{os.path.expanduser('~')}/stardustSite/static/info.json", "w") as f:
			f.writelines(json.dumps(data, indent=2))
        
		await interaction.response.send_message("Terralith successfully updated!")

async def setup(client):
	await client.add_cog(Admin(client))